name: Continuous Integration and Delivery

on:
  push:
    branches:
      - master

env:
  TENSORFLOW_IMAGE_HSV_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/tfserving_classifier_hsv
  TENSORFLOW_IMAGE_HSV: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/tfserving_classifier_hsv:$( echo $GITHUB_SHA )
  TENSORFLOW_IMAGE_SSIM_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/tfserving_classifier_ssim
  TENSORFLOW_IMAGE_SSIM: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/tfserving_classifier_ssim:$( echo $GITHUB_SHA )
  WEB_IMAGE_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web:$( echo $GITHUB_SHA )
  NGINX_IMAGE_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx:$( echo $GITHUB_SHA )
  FRONTEND_IMAGE_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/frontend
  FRONTEND_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/frontend:$( echo $GITHUB_SHA )
  CELERY_IMAGE_BASE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/celery
  CELERY_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/celery:$( echo $GITHUB_SHA )


jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env


      - name: Prepare images
        run: |
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE_BASE=$(echo ${{env.NGINX_IMAGE_BASE}} )" >> $GITHUB_ENV
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "WEB_IMAGE_BASE=$(echo ${{env.WEB_IMAGE_BASE}} )" >> $GITHUB_ENV
          echo "TENSORFLOW_IMAGE_HSV=$(echo ${{env.TENSORFLOW_IMAGE_HSV}} )" >> $GITHUB_ENV
          echo "TENSORFLOW_IMAGE_HSV_BASE=$(echo ${{env.TENSORFLOW_IMAGE_HSV_BASE}} )" >> $GITHUB_ENV
          echo "TENSORFLOW_IMAGE_SSIM=$(echo ${{env.TENSORFLOW_IMAGE_SSIM}} )" >> $GITHUB_ENV
          echo "TENSORFLOW_IMAGE_SSIM_BASE=$(echo ${{env.TENSORFLOW_IMAGE_SSIM_BASE}} )" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$(echo ${{env.FRONTEND_IMAGE}} )" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_BASE=$(echo ${{env.FRONTEND_IMAGE_BASE}} )" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml tfserving_classifier_hsv tfserving_classifier_ssim

      - name: Push images
        run: |
          docker tag ${{ env.TENSORFLOW_IMAGE_HSV }} ${{ env.TENSORFLOW_IMAGE_HSV_BASE }}:latest
          docker push ${{ env.TENSORFLOW_IMAGE_HSV_BASE }} -a
          docker tag ${{ env.TENSORFLOW_IMAGE_SSIM }} ${{ env.TENSORFLOW_IMAGE_SSIM_BASE }}:latest
          docker push ${{ env.TENSORFLOW_IMAGE_SSIM_BASE }} -a
          docker tag ${{ env.WEB_IMAGE }}  ${{ env.WEB_IMAGE_BASE }}:latest
          docker push ${{ env.WEB_IMAGE_BASE }} -a
          docker tag ${{ env.NGINX_IMAGE }} ${{ env.NGINX_IMAGE_BASE }}:latest
          docker push ${{ env.NGINX_IMAGE_BASE }} -a
          docker tag ${{ env.FRONTEND_IMAGE }} ${{ env.FRONTEND_IMAGE_BASE }}:latest
          docker push ${{ env.FRONTEND_IMAGE_BASE }} -a
  deploy_1:
    name: Deploy to DigitalOcean 1
    runs-on: ubuntu-latest
    needs: build

    environment:
      name: 'Production'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        shell: bash
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo TENSORFLOW_IMAGE_hsv=${{ env.TENSORFLOW_IMAGE_hsv }} >> .env
          echo TENSORFLOW_IMAGE_SSIM=${{ env.TENSORFLOW_IMAGE_SSIM}} >> .env
          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
      - name: SSH key to ssh-agent
        shell: bash
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - uses: "./.github/actions/build-deploy"
        with:
          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_1 }}

#  deploy_2:
#    name: Deploy to DigitalOcean 2
#    runs-on: ubuntu-latest
#    needs: build
#
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_2 }}
#
#  deploy_3:
#    name: Deploy to DigitalOcean 3
#    runs-on: ubuntu-latest
#    needs: build
#
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_3 }}
#
#  deploy_4:
#    name: Deploy to DigitalOcean 4
#    runs-on: ubuntu-latest
#    needs: build
#
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_4 }}
#
#  deploy_5:
#    name: Deploy to DigitalOcean 5
#    runs-on: ubuntu-latest
#    needs: build
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_5 }}
#
#  deploy_6:
#    name: Deploy to DigitalOcean 6
#    runs-on: ubuntu-latest
#    needs: build
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_6 }}
#
#  deploy_7:
#    name: Deploy to DigitalOcean 7
#    runs-on: ubuntu-latest
#    needs: build
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_7 }}
#
#  deploy_8:
#    name: Deploy to DigitalOcean 8
#    runs-on: ubuntu-latest
#    needs: build
#    environment:
#      name: 'Production'
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Checkout master
#        uses: actions/checkout@v2
#      - name: Add environment variables to .env
#        shell: bash
#        run: |
#          echo DEBUG=0 >> .env
#          echo SQL_ENGINE=django.db.backends.postgresql >> .env
#          echo DATABASE=postgres >> .env
#          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
#          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
#          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
#          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
#          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
#          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
#          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#          echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
#          echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
#          echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
#          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo sentry_secret=${{ secrets.sentry_secret }} >> .env
#          echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
#          echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
#          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
#          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
#          echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
#      - name: SSH key to ssh-agent
#        shell: bash
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p ~/.ssh
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#      - uses: "./.github/actions/build-deploy"
#        with:
#          server: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS_8 }}
