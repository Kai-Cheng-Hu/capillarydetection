name: "Build and deploy"
inputs:
  server:
    description: 'Target Server'
    required: true
runs:
  using: "composite"

  steps:
    - name: Checkout master
      uses: actions/checkout@v2
    - name: Add environment variables to .env
      shell: bash
      run: |
        echo DEBUG=0 >> .env
        echo SQL_ENGINE=django.db.backends.postgresql >> .env
        echo DATABASE=postgres >> .env
        echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
        echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
        echo SQL_USER=${{ secrets.SQL_USER }} >> .env
        echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
        echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
        echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
        echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
        echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
        echo TENSORFLOW_IMAGE=${{ env.TENSORFLOW_IMAGE }} >> .env
        echo FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }} >> .env
        echo CELERY_IMAGE=${{ env.WEB_IMAGE }} >> .env
        echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
        echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
        echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
        echo sentry_secret=${{ secrets.sentry_secret }} >> .env
        echo CELERY_BROKER=${{ secrets.CELERY_BROKER }} >> .env
        echo USE_SPACES=${{ secrets.USE_SPACES }} >> .env
        echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
        echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
        echo AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} >> .env
    - name: SSH key to ssh-agent
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
    - name: "Build and deploy - ${{ inputs.server }}"
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ inputs.server }}:/app
        ssh -o StrictHostKeyChecking=no root@${{ inputs.server }} << 'ENDSSH'
          cd /app
          docker-compose -f docker-compose.prod.yml down --volume --rmi all
          source .env
          docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
          docker-compose -f docker-compose.prod.yml up --quiet-pull --force-recreate -d
        ENDSSH
      shell: bash
