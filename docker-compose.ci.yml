version: "3.9"

services:
  web:
    container_name: backend
    image: "${WEB_IMAGE}"
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      cache_from:
        - "${WEB_IMAGE_BASE}:latest"
    volumes:
      - django_static_volume:/usr/src/app/static
      - media:/usr/src/app/media
    expose:
      - 8000
    env_file:
      - .env
    command: gunicorn server.wsgi:application --bind 0.0.0.0:8000 -w 17
  react:
    image: "${FRONTEND_IMAGE}"
    container_name: frontend
    build:
      context: ./frontend_GUI
      dockerfile: Dockerfile.prod
      cache_from:
        - "${FRONTEND_IMAGE_BASE}:latest"
    volumes:
      - react_static_volume:/usr/src/app/build/static
    expose:
      - 3000
    command: serve -s build -l 3000
    env_file:
      - .env
    depends_on:
      - web

  tfserving_classifier_hsv:
    build: ./algorithms_HSV
    container_name: tfserving_classifier_hsv
    image: "${TENSORFLOW_IMAGE_HSV}"
    volumes:
      - ./algorithms_HSV/HSV_Model:/models/model
    ports:
      - "8501:8501"
    depends_on:
      - web


  tfserving_classifier_ssim:
    build: ./algorithms_SSIM
    container_name: tfserving_classifier_ssim
    image: "${TENSORFLOW_IMAGE_SSIM}"
    volumes:
      - ./algorithms_SSIM/SSIM_Model:/models/model
    ports:
      - "8502:8501"
    depends_on:
      - web

  nginx:
    container_name: nginx
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
      cache_from:
        - "${NGINX_IMAGE_BASE}:latest"
    image: "${NGINX_IMAGE}"
    volumes:
      - django_static_volume:/usr/src/app/django_files/static
      - react_static_volume:/usr/src/app/react_files/static
      - media:/usr/src/app/media
    ports:
      - "80:80"
    depends_on:
      - web
      - react

  redis:
    container_name: redis
    image: "redis:alpine"

  celery:
    image: "${CELERY_IMAGE}"
    container_name: celery
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      cache_from:
        - "${CELERY_IMAGE_BASE}:latest"
    command: celery -A server worker --without-heartbeat --without-gossip --without-mingle
    volumes:
      - django_static_volume:/usr/src/app/static
      - media:/usr/src/app/media
    env_file:
      - .env
    depends_on:
      - redis

volumes:
  postgres_data:
  django_static_volume:
  react_static_volume:
  media:
